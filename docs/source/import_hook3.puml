@startuml
    :Search for file;
    note right #White
        We can specify a different file type. See example **french.py**.
        <back:lightblue> We could specify different search locations.</back>
    end note
    :Return file spec & Loader;
    :Create a module object;
    note right #LightBlue
        We could substitute our own.
    end note
    #White: We can replace the module's ~__class__;
    note right #White: See example **constants.py**
    partition Decode {
        note right #White
           See **lambda_encoding.py** which is
           a custom codec, and does not need
           the rest of Python's importlib
           machinery.
        end note
        :Read file content as bytes;
        :Convert bytes into string;
    }
    #White: We can transform the source;
    note right #White
        This is the case for most of our examples.
        Starting from syntax that would be invalid
        in Python we need to make sure that it can
        parsed by Python.
    end note
    partition AST {
        note right #White
           Substitution of this entire block
           as a single unit is possible. See
           example **polish_expr.py**.
        end note
        :Convert the source into a series of tokens;
        :Transform into a Concrete Parse Tree (CPT);
        :Transform the CPT into an Abstract Syntax Tree (AST);
    }
    #White: We can modify the AST that was created;
    note right #White: See example **fractions_ast.py**
    partition Bytecode {
        note right #LightBlue
           Substitution of this entire block
           as a single unit could be done.
           No example exists yet.
        end note
        :Transform AST into a Control Flow Graph (CFG);
        :Transform CFG into bytecodes;
    }
    #White: We can modify the bytecode;
    note right #White: See example **confused_math_bc.py**
    :Execute bytecode into module's dict;
    note right #White
       We can substitute our own version.
       See example **constants.py**
    end note
@enduml
